//************************************************************************
//*                                                                      *
//*                     M O D E L S   L I B R A R Y                      *
//*                                                                      *
//************************************************************************//                            I M P O R T A N T                           
//                            -----------------                           
// THIS FILE IS GENERATED AUTOMATICALLY USING DATA IN THE MODELS LIBRARIES
//    Do not edit this file. This file is generated by libgenerator.c     
// -----------------------------------------------------------------------





#if defined(MODELS_H)
#else
#define MODELS_H


#include <gsl/gsl_errno.h>
#include <gsl/gsl_matrix.h>
#include <gsl/gsl_odeiv.h>
#include <gsl/gsl_sf_trig.h>
#include <gsl/gsl_math.h>


#define N_NEURON_MODELS 7
#define N_SYNAPSE_MODELS 7
#define N_PLASTICITY_MODELS 4



//definitions and structures

/// holds all variables/parameters required to use the GNU Scientific Library ode solver
struct GSL_ODESOLVER_DATA
{
	double *y;
	double *y_err;
	double *dydt_in, *dydt_out;
	const gsl_odeiv_step_type *T;
	gsl_odeiv_step *s;
	gsl_odeiv_system sys;
};

/// holds all data regarding a particular model for fdomain dynamics, including pointers to relevant functions
struct MODEL_DYNAMICS_NEURON
{
	char *model_label;                     ///< array holding all parameters labels
	void (*Initialize)(long nrn, int fdm); ///< pointer to the model Initialize() function
	double (*Advance)(long nrn, int fdm);  ///< pointer to the model Advance() function
	int n_params;                          ///< number of parameters defining the model dynamics
	char **param_label;                    ///< array holding all parameters labels
	int n_statevars;                       ///< number of state variables used in the model dynamics
	char **statevar_label;                 ///< array holding all state variables labels
};

/// holds all data regarding a particular model for synapse current dynamics, including pointers to relevant functions
struct MODEL_DYNAMICS_SYNAPSE
{
	char *model_label;                                                         ///< array holding all parameters labels
	void (*Initialize)(long syn, long pre_nrn, long post_nrn, int target_fdm); ///< pointer to the model Initialize() function
	void (*Activate)(double activation_time, long syn, long pre_nrn, long post_nrn, int target_fdm);   ///< pointer to the model Activate() function
	void (*Advance)(long syn, long pre_nrn, long post_nrn, int target_fdm);    ///< pointer to the model Advance() function
	int n_params;                                                              ///< number of parameters defining the model dynamics
	char **param_label;                                                        ///< array holding all parameters labels
	int n_statevars;                                                           ///< number of state variables used in the model dynamics
	char **statevar_label;                                                     ///< array holding all state variables labels
};

/// holds all data regarding a particular model for synapse plasticity dynamics, including pointers to relevant functions
struct MODEL_DYNAMICS_PLASTICITY
{
	char *model_label;                                                         ///< array holding all parameters labels
	void (*Initialize)(long syn, long pre_nrn, long post_nrn, int target_fdm); ///< pointer to the model Initialize() function
	void (*Activate)(double activation_time, long syn, long pre_nrn, long post_nrn, int target_fdm);   ///< pointer to the model Activate() function
	int n_params;                                                              ///< number of parameters defining the model dynamics
	char **param_label;                                                        ///< array holding all parameters labels
	int n_statevars;                                                           ///< number of state variables used in the model dynamics
	char **statevar_label;                                                     ///< array holding all state variables labels
};



//Functions prototypes
void SetupModelsLibrary(void);

struct MODEL_DYNAMICS_NEURON *GetNeuronModelFromString( char *modelname );
struct MODEL_DYNAMICS_SYNAPSE *GetSynapseModelFromString( char *modelname );
struct MODEL_DYNAMICS_PLASTICITY *GetPlasticityModelFromString( char *modelname );


void ModelInitialize_HH(long nrn, int fdm);
double ModelAdvance_HH(long nrn, int fdm);

void ModelInitialize_HH_O1(long nrn, int fdm);
double ModelAdvance_HH_O1(long nrn, int fdm);

void ModelInitialize_Izhikevich(long nrn, int fdm);
double ModelAdvance_Izhikevich(long nrn, int fdm);

void ModelInitialize_Izhikevich_O1(long nrn, int fdm);
double ModelAdvance_Izhikevich_O1(long nrn, int fdm);

void ModelInitialize_LIF(long nrn, int fdm);
double ModelAdvance_LIF(long nrn, int fdm);

void ModelInitialize_LIF_O1(long nrn, int fdm);
double ModelAdvance_LIF_O1(long nrn, int fdm);

void ModelInitialize_Pas(long nrn, int fdm);
double ModelAdvance_Pas(long nrn, int fdm);


void ModelInitialize_AMPA_NMDA(long syn, long pre_nrn, long post_nrn, int target_fdm);
void ModelActivate_AMPA_NMDA(double activation_time, long syn, long pre_nrn, long post_nrn, int target_fdm);
void ModelAdvance_AMPA_NMDA(long syn, long pre_nrn, long post_nrn, int target_fdm);

void ModelInitialize_AlphaSyn(long syn, long pre_nrn, long post_nrn, int target_fdm);
void ModelActivate_AlphaSyn(double activation_time, long syn, long pre_nrn, long post_nrn, int target_fdm);
void ModelAdvance_AlphaSyn(long syn, long pre_nrn, long post_nrn, int target_fdm);

void ModelInitialize_Exp2Syn(long syn, long pre_nrn, long post_nrn, int target_fdm);
void ModelActivate_Exp2Syn(double activation_time, long syn, long pre_nrn, long post_nrn, int target_fdm);
void ModelAdvance_Exp2Syn(long syn, long pre_nrn, long post_nrn, int target_fdm);

void ModelInitialize_ExpSyn(long syn, long pre_nrn, long post_nrn, int target_fdm);
void ModelActivate_ExpSyn(double activation_time, long syn, long pre_nrn, long post_nrn, int target_fdm);
void ModelAdvance_ExpSyn(long syn, long pre_nrn, long post_nrn, int target_fdm);

void ModelInitialize_IExpSyn(long syn, long pre_nrn, long post_nrn, int target_fdm);
void ModelActivate_IExpSyn(double activation_time, long syn, long pre_nrn, long post_nrn, int target_fdm);
void ModelAdvance_IExpSyn(long syn, long pre_nrn, long post_nrn, int target_fdm);

void ModelInitialize_ISyn(long syn, long pre_nrn, long post_nrn, int target_fdm);
void ModelActivate_ISyn(double activation_time, long syn, long pre_nrn, long post_nrn, int target_fdm);
void ModelAdvance_ISyn(long syn, long pre_nrn, long post_nrn, int target_fdm);

void ModelInitialize_NMDA(long syn, long pre_nrn, long post_nrn, int target_fdm);
void ModelActivate_NMDA(double activation_time, long syn, long pre_nrn, long post_nrn, int target_fdm);
void ModelAdvance_NMDA(long syn, long pre_nrn, long post_nrn, int target_fdm);


void ModelInitialize_Hebb(long syn, long pre_nrn, long post_nrn, int target_fdm);
void ModelActivate_Hebb(double activation_time, long syn, long pre_nrn, long post_nrn, int target_fdm);

void ModelInitialize_STDP(long syn, long pre_nrn, long post_nrn, int target_fdm);
void ModelActivate_STDP(double activation_time, long syn, long pre_nrn, long post_nrn, int target_fdm);

void ModelInitialize_STP(long syn, long pre_nrn, long post_nrn, int target_fdm);
void ModelActivate_STP(double activation_time, long syn, long pre_nrn, long post_nrn, int target_fdm);

void ModelInitialize_Static(long syn, long pre_nrn, long post_nrn, int target_fdm);
void ModelActivate_Static(double activation_time, long syn, long pre_nrn, long post_nrn, int target_fdm);



#endif
